{"version":3,"sources":["dataset.js","App.js","reportWebVitals.js","index.js"],"names":["openings","prefixes","postfixes","App","useState","otakuLevel","setOtakuLevel","originalText","setOriginalText","tranlatedText","setTranslatedText","randomBoolean","Math","random","translate","text","text_line_array","split","console","log","output_text","random_opening","floor","length","first_person_bool","we_bool","forEach","line","w_bool","prefix_bool","postfix_bool","replace","w_number","w_text","repeat","prefix_text","postfix_text","alert","className","placeholder","cols","rows","onChange","e","target","value","type","id","min","max","step","defaultValue","onMouseUp","htmlFor","Button","variant","color","onClick","readOnly","href","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uOAGMA,G,MAAW,CACb,2BACA,mBAGEC,EAAW,CACb,iBACA,iBACA,WACA,iBACA,YAGEC,EAAY,CACd,eACA,SACA,eACA,SACA,eACA,eACA,2BACA,SACA,eACA,SACA,eACA,qBACA,SACA,eACA,eACA,gB,OC8DWC,MAzFf,WACE,MAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAwCF,mBAAS,IAAjD,mBAAOG,EAAP,KAAqBC,EAArB,KACA,EAA2CJ,mBAAS,IAApD,mBAAOK,EAAP,KAAsBC,EAAtB,KAcMC,EAAgB,kBAAOC,KAAKC,SAAyB,IAAbR,GAExCS,EAAY,SAACC,GACjB,GAAa,KAATA,EAAJ,CAIA,IAAIC,EAAkBD,EAAKE,MAAM,MACjCC,QAAQC,IAAIH,GACZ,IAAII,EAAc,GAGlB,GADgBT,IACF,CACZ,IAAIU,EAAiBrB,EAASY,KAAKU,MAAOV,KAAKC,SAAWb,EAASuB,SACnEH,GAAW,UAAOC,EAAP,MAGb,IAAIG,EAAoBb,IACpBc,EAAUd,IAEdK,EAAgBU,SAAQ,SAAAC,GACtB,IAAIC,EAASjB,IACTkB,EAAclB,IACdmB,EAAenB,IAGfa,IACFG,EAAOA,EAAKI,QAAQ,oBDjDP,iBCoDXN,IACFE,EAAOA,EAAKI,QAAQ,eDpDA,uBCwDtB,IAAIC,GAAapB,KAAKU,MAAwB,EAAhBV,KAAKC,UAAiB,GAAMe,EACtDK,EAAS,IAAIC,OAAOF,GAGpBG,EAAcN,EAAe5B,EAASW,KAAKU,MAAOV,KAAKC,SAAWZ,EAASsB,SAAa,GAGxFa,EAAeN,EAAgB,IAAM5B,EAAUU,KAAKU,MAAOV,KAAKC,SAAWX,EAAUqB,SAAa,GAEtGH,GAAW,UAAOe,GAAP,OAAqBR,EAArB,YAA6BM,EAA7B,YAAuCG,EAAvC,UAGb1B,EAAkBU,QA3ChBiB,MAAM,4EA8CV,OACE,qBAAKC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,gFACA,0BAAUA,UAAU,aAAaC,YAAY,8BAAUC,KAAK,MAAMC,KAAK,KAAKC,SA9DvD,SAACC,GAC1BnC,EAAgBmC,EAAEC,OAAOC,UA8DrB,sBAAKP,UAAU,aAAf,UACA,uBAAOQ,KAAK,QAAQR,UAAU,uCAAuCS,GAAG,mBAAmBC,IAAI,IAAIC,IAAI,MAAMC,KAAK,KAAKC,aAAc9C,EAAY+C,UApE7H,SAACT,GACzBrC,EAAcqC,EAAEC,OAAOC,UAoEnB,wBAAOP,UAAU,mBAAmBe,QAAQ,mBAA5C,kCAAsEhD,QAItE,cAACiD,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,YAAYC,QAjE5B,WACtB3C,EAAUP,IAgEN,0BAGA,uBACA,0BAAUmD,UAAQ,EAACpB,UAAU,aAAaC,YAAY,2BAAOC,KAAK,MAAMC,KAAK,KAAKI,MAAOpC,IACzF,mBAAG6B,UAAU,YAAYqB,KAAM,8BAA8Bf,OAAO,SAASgB,IAAI,sBAAjF,yCC5EOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.dffdf80d.chunk.js","sourcesContent":["const first_person = \"在下\";\nconst everybody_tranlated = \"米娜桑\";\n\nconst openings = [\n    \"呀咧呀咧\",\n    \"阿no餒\"\n]\n\nconst prefixes = [\n    \"嗯姆..\",\n    \"唔姆..\",\n    \"唔..\",\n    \"唉都..\",\n    \"嘛..\",\n]\n\nconst postfixes = [\n    \"探頭\",\n    \"茶\",\n    \"燦笑\",\n    \"笑\",\n    \"搔頭\",\n    \"摸頭\",\n    \"燦笑摸頭\",\n    \"嘆\",\n    \"歪頭\",\n    \"望\",\n    \"扶額\",\n    \"推眼鏡\",\n    \"？\",\n    \"汗顏\",\n    \"咳咳\",\n    \"ㄏㄏ\"\n]\n\nexport {first_person, everybody_tranlated, openings, prefixes, postfixes};","import { Button } from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport './App.css';\nimport {first_person, everybody_tranlated, openings, prefixes, postfixes} from \"./dataset\";\n\nfunction App() {\n  const [otakuLevel, setOtakuLevel] = useState(30);\n  const [originalText, setOriginalText] = useState(\"\");\n  const [tranlatedText, setTranslatedText] = useState(\"\");\n\n  const handleOtakuChange = (e) => {\n    setOtakuLevel(e.target.value);\n  }\n\n  const handletextOnChange = (e) => {\n    setOriginalText(e.target.value);\n  }\n\n  const hangleTranslate = () => {\n    translate(originalText);\n  }\n\n  const randomBoolean = () => (Math.random() < (otakuLevel * 0.01));\n\n  const translate = (text) => {\n    if (text === ''){\n      alert(\"呀咧呀咧 不打點字嗎www(歪頭\");\n      return;\n    }\n    let text_line_array = text.split('\\n');\n    console.log(text_line_array);\n    let output_text = \"\";\n\n    let opening_b = randomBoolean();\n    if (opening_b){\n      let random_opening = openings[Math.floor( Math.random() * openings.length )];\n      output_text += `${random_opening}\\n`;\n    }\n    \n    let first_person_bool = randomBoolean();\n    let we_bool = randomBoolean();\n\n    text_line_array.forEach(line => {\n      let w_bool = randomBoolean();\n      let prefix_bool = randomBoolean();\n      let postfix_bool = randomBoolean();\n\n      // first person\n      if (first_person_bool){\n        line = line.replace(/我(?!們)/g, first_person);\n      }\n\n      if (we_bool){\n        line = line.replace(\"大家\", everybody_tranlated);\n      }\n\n      // w\n      let w_number = ( Math.floor ( Math.random() * 4 ) + 2 ) * w_bool;\n      let w_text = \"w\".repeat(w_number); \n\n      // prefix\n      let prefix_text = prefix_bool ? (prefixes[Math.floor( Math.random() * prefixes.length )]) : '';\n\n      // postfix\n      let postfix_text = postfix_bool ? ('(' + postfixes[Math.floor( Math.random() * postfixes.length )]) : '';\n\n      output_text += `${prefix_text}${line} ${w_text} ${postfix_text} \\n`;\n    });\n\n    setTranslatedText(output_text);\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>肥宅對話轉換器 Pro</h1>\n        <textarea className=\"text-input\" placeholder=\"輸入對話...\" cols=\"100\" rows=\"15\" onChange={handletextOnChange}></textarea>\n        <div className=\"form-group\">\n        <input type=\"range\" className=\"form-control-range pantoneZOZ1-range\" id=\"formControlRange\" min=\"0\" max=\"100\" step=\"10\" defaultValue={otakuLevel} onMouseUp={handleOtakuChange}/>\n        <label className=\"otaku-level-show\" htmlFor=\"formControlRange\">肥宅度 = {otakuLevel}</label>\n        \n        \n        </div>\n        <Button variant=\"contained\" color=\"secondary\" onClick={hangleTranslate}>\n          轉換\n        </Button>\n        <hr />\n        <textarea readOnly className=\"text-input\" placeholder=\"轉換結果\" cols=\"100\" rows=\"15\" value={tranlatedText}></textarea>\n        <a className=\"developer\" href =\"https://github.com/Kaminyou\" target=\"_blank\" rel=\"noreferrer noopener\">Developed by Kaminyou</a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}